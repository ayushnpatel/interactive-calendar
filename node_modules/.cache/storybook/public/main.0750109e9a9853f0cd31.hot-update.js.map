{"version":3,"file":"main.0750109e9a9853f0cd31.hot-update.js","sources":["webpack:///./src/components/Calendar/Calendar.js","webpack:///./src/components/Cell/Cell.js"],"sourcesContent":["import React, { useState} from 'react'\nimport '../stylesheets/calendar.css';\nimport Cell from '../Cell/Cell.js'\n\nfunction Calendar(props){\n    const weekday = new Array(7);\n    weekday[0] = \"Sunday\"; weekday[1] = \"Monday\"; weekday[2] = \"Tuesday\"; weekday[3] = \"Wednesday\";weekday[4] = \"Thursday\";weekday[5] = \"Friday\"; weekday[6] = \"Saturday\";\n    const months = new Array(12);\n    months[0] = \"January\"; months[1] = \"February\"; months[2] = \"March\"; months[3] = \"April\"; months[4] = \"May\"; months[5] = \"June\"; months[6] = \"July\"; months[7] = \"August\"; months[8] = \"September\"; months[9] = \"October\"; months[10] = \"November\"; months[11] = \"December\";\n    const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\n    const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n\n    function renderCalendar(){\n        let key=0;\n        const monthMaxDays = new Date(currentYear, currentMonth+1, 0).getDate();\n        let calendarCells = [];\n        const prevMonthMaxDays = new Date(currentYear, currentMonth, 0).getDate();\n        for(let i = weekday.indexOf(new Date(currentYear, currentMonth%12, 1).toLocaleString('en-us', {  weekday: 'long' }))-1; i >=0 ; i--){\n            calendarCells.push(<Cell key={key++} weightMap={props.weightMap} setWeightMap={props.setWeightMap} date={new Date(currentYear, currentMonth-1, prevMonthMaxDays-i)} day={prevMonthMaxDays-i} color=\"blue\"></Cell>);\n        }\n        for(let i = 1; i <= monthMaxDays; i++){\n            calendarCells.push(<Cell key={key++} weightMap={props.weightMap} setWeightMap={props.setWeightMap} date={new Date(currentYear, currentMonth, i)} day={i} color=\"gray\"></Cell>)\n        }\n        let currentLength = calendarCells.length;\n        for(let i = 1; i <= 42 - currentLength; i++){\n            calendarCells.push(<Cell key={key++} weightMap={props.weightMap} setWeightMap={props.setWeightMap} date={new Date(currentYear, currentMonth, monthMaxDays+i)} day={i} color=\"blue\"></Cell>)\n        }\n        const calendar = chunk(calendarCells, 7).map(arr => <tr key={key++}>{arr}</tr> ); \n        return calendar;\n    }\n    function chunk(arr, chunkSize) {\n        var R = [];\n        for (var i=0,len=arr.length; i<len; i+=chunkSize)\n          R.push(arr.slice(i,i+chunkSize));\n        return R;\n    }\n    return(\n        <div className=\"calendar-wrap\">\n            <button onClick={() => {\n                setCurrentMonth(new Date(currentYear, currentMonth, 0).getMonth())\n                setCurrentYear(currentMonth === 0 ? currentYear-1 : currentYear);\n            }}>Prev</button>\n            <button onClick={() => {\n                setCurrentMonth(new Date(currentYear, currentMonth+2, 0).getMonth())\n                setCurrentYear(currentMonth === 11 ? currentYear+1 : currentYear);\n            }}>Next</button>\n            <div>{months[currentMonth%12]}  {currentYear}</div>\n            <div className=\"calendar\">\n                <table id=\"dataTable\">\n                    <thead>\n                        <tr>\n                            <th>Sunday</th>\n                            <th>Monday</th>\n                            <th>Tuesday</th>\n                            <th>Wendnesday</th>\n                            <th>Thursday</th>\n                            <th>Friday</th>\n                            <th>Saturday</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {renderCalendar()}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Calendar;","import React, {useState, useEffect} from 'react'\n\nfunction Cell(props){\n    const {date, color, day, weightMap, setWeightMap} = props;\n    const [currentWeight, changeCurrentWeight] = useState(weightMap.has(date.getTime()) ? weightMap.get(date.getTime()): \"\");\n    function weightChange(event){\n        changeCurrentWeight(event.target.value);\n    }\n    useEffect(\n        () => {\n            changeCurrentWeight(weightMap.has(date.getTime()) ? weightMap.get(date.getTime()): \"\");\n        },\n        [date.getTime()],\n    );\n    useEffect(\n        () => {\n            if(!(currentWeight === \"\"))  setWeightMap(new Map([...new Map(weightMap.set(date.getTime(), currentWeight))].sort()));\n            if(currentWeight === \"\"){\n                weightMap.delete(date.getTime())\n                setWeightMap(new Map(weightMap))\n            } \n        },[currentWeight]\n    );\n    return(\n        <td>\n            <div className=\"Cell\" style={{backgroundColor:color}}>\n                <div className=\"cell-day\">{day}</div>\n                <input type=\"text\" value={currentWeight} onChange={weightChange}style={{background:'transparent', border:'transparent', height:\"10vh\", width:\"13.5vh\"}}></input>\n            </div>\n        </td>\n    )\n}\n\nexport default Cell;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAIA;AACA;AACA;AACA;AAHA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAPA;AADA;AAWA;AAAA;AAZA;AADA;AAVA;AA8BA;AACA;AAhEA;;;;;;AAiEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;AACA;AA9BA;;;;;;AA+BA;AACA;;;;;;;;;;;A","sourceRoot":""}